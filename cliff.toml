[changelog]
# 生成的变更日志文件名（默认：CHANGELOG.md）
file = "CHANGELOG.md"
# 是否覆盖已存在的文件（默认：true）
overwrite = true
# 生成日志的提交范围（如 "HEAD.." 表示最新提交）
commit_range = "HEAD.."
# 日志头部内容（支持多行字符串）
header = """
# Changelog\n
All notable changes to this project will be documented here.\n
"""
# 日志条目排序方式（可选值：asc, desc）
sorting = "desc"

# 标签匹配规则
[tag]
# 匹配 Git 标签的正则表达式（如 v1.0.0）
regex = "^v(?P<version>.+)$"
# 跳过的标签（如 alpha/beta 版本）
skip_tags = ["v0.1.0-beta"]
# 标签日期格式（默认：%Y-%m-%d）
date_format = "%Y-%m-%d"
# 标签排序方式（默认按版本号排序）
sorting = "semver"

[filter_commits]
# 是否过滤合并提交（默认：true）
exclude_merges = true

# 忽略的提交类型（如 chore, test 等）
[[commit_parsers]]
regex = "^(chore|test|style)"
# 隐藏这些提交，不显示在日志中
skip = true

# 匹配 BREAKING CHANGE 提交
[[commit_parsers]]
regex = "^(break|breaking)"
group = "Breaking Changes"
# 设置为此类提交的优先级（越高越靠前）
priority = 10

# 匹配 "docs" 类型的提交
[[commit_parsers]]
regex = "^docs"
group = "Documentation"
# 是否在日志中隐藏提交的 scope
hide_scope = true

# 匹配 "fix" 类型的提交
[[commit_parsers]]
regex = "^fix"
group = "Bug Fixes"

# 提交解析规则（按顺序匹配）
[commit_parsers]

# 匹配 "feat" 类型的提交
[[commit_parsers]]
# 正则表达式匹配提交消息
regex = "^feat"
# 分组标题（显示在变更日志中）
group = "Features"
# 是否跳过此类型的提交（默认：false）
skip = false
# 默认作用域（用于未指定 scope 的提交）
default_scope = "general"

# Git 相关配置
[git]
# 是否遵循 Conventional Commits 规范（默认：true）
conventional_commits = true
# 过滤不符合规范的提交（默认：false）
filter_unconventional = false
# 是否分割包含多部分的提交（如多次提交合并）
split_commits = []
# 提交信息预处理（如删除前缀）
#commit_preprocessors = [
#    { pattern = '^(\w+):\s*(.*)', replace = "$2" }
#]